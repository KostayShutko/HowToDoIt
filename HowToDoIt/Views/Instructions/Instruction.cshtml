@model HowToDoIt.Models.Classes_for_Db.Instruction
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="~/Content/StyleInstrucions.css">
<link rel="stylesheet" href="~/Scripts/dowland/autocomplete-jquery-ui.css">
<script src="~/Scripts/jquery-ui.min.js"></script>
<link rel="stylesheet" href="~/Content/InstructionButton/Square.css">
<input type="hidden" id="id-instruction" name="id-instruction" value="@Model.Id">


<div class="content">
    <div class="row">
        <div class="col-md-offset-2 col-md-8">
            <div class="elem-in-center">
                <h1 class="text-muted">Добавить инструкцию</h1>
            </div>
        </div>
    </div>
    <div class="block">
        <div class="row margin-top-30">
            <div class=" col-md-8 entity">
                <input class="form-control" value="@Model.Name" id="header-instruction" name="link-youtube-name" placeholder="заголовок" type="text">
            </div>
        </div>
    </div>
    <div class="block">
        <div class="row margin-top-15">
            <div class="col-md-8 entity">
                <select id="category" class="form-control">
                    <option selected disabled>Категория</option>
                    @for (int i = 0; i < ViewBag.Categories.Length; i++)
                    {
                        <option>@ViewBag.Categories[i].Name</option>
                    }
                </select>
            </div>
        </div>
    </div>

    <div class="block">
        <div class="row margin-top-15">
            <div class="col-md-8 entity">
                <input id="tags" class="form-control" placeholder="Введи теги через запятую">
            </div>
        </div>
    </div>
    <hr />
    <div class="block">
        <div class="row content-sortable margin-top-30">
            @if (ViewBag.Step != null)
            {
            foreach (var step in ViewBag.Step)
            {
                <div class="col-md-3 move-true">
                    <div class="square-service-block">
                        <div class="trash">
                            <i class="fa fa-times fa-lg icon-remove" aria-hidden="true"></i>
                        </div>
                        <div class="item-block">
                            <a style="cursor: pointer;" class="link  go-to-step">
                                <h2 class="ssb-title">Step @step.Number</h2>
                                <input type="hidden" id="id-step" name="id-instruction" value="@step.Id">
                            </a>
                        </div>
                    </div>
                </div>
            }
            }

            <div class="col-md-3 before-insert">
                <div class="square-service-block">
                    <div class="item-block">
                        <a style="cursor: pointer;" id="AddStep" class="link">
                            <div class="ssb-icon"> <i class="fa fa-plus" aria-hidden="true"></i> </div>
                        </a>
                    </div>
                </div>
            </div>

            
        </div>
    </div>
    <div class="row">
        <div class="col-md-offset-4 col-md-4">
            <div class="elem-in-center">
                <button type="button" class="btn btn-primary button-save">Сохранить</button>
            </div>
        </div>
    </div>
</div>



<script>
    var count = @(ViewBag.CountStep??0);
    var notHeader = "Введите заголовок";
    var notCorrectCategory = "Выберите категорию";
    var err;
    var tegStr="@ViewBag.TagString";
    var categr;
    @if  (Model.Category!=null)
    {
        @:categr ="@Model.Category.Name";
    }


    $(function () {

        function GetStep(block) {
            var elem = block.getElementsByTagName('h2')[0];
            return elem.innerHTML.split(' ')[1];
        }

        $('.go-to-step').click(function () {
            var step = GetStep(this);
            var idInstruction = $("#id-instruction").val();
            var temp = this.getElementsByTagName('input')[0];
            idStep = $(temp).val();
            window.location.href = '@Url.Action("Step", "Instructions")/' + '?step=' + step + '&idInstruction=' + idInstruction + '&idStep='+idStep;
        });
        if (categr!="") {
            $("select option").filter(function () {
                //may want to use $.trim in here
                return $(this).text() == categr;
            }).attr('selected', true);
        }

        $('#tags').val(tegStr);

        function Recount() {
            var elems = document.getElementsByTagName('h2')
            for (var i = 0; i < elems.length; i++) {
                var step = elems[i].innerHTML.split(' ')[0];
                elems[i].innerHTML = step +' '+ (i + 1);
            }

        }

        function SaveInstruction(controller, action){
            instrution = new Object();
            if (GetData(instrution)) {
                alert(err);
                return false;
            }
            SendAsAjax(instrution, controller, action);
            return true;
        }

        function SaveByButton() {
            if (SaveInstruction("Instructions", "SaveInstruction"))
                window.location.href = '@Url.Action("Index", "Home")';
        }

        function SaveByAddStep() {

            SaveInstruction("Instructions", "SaveInstructionForAddStep");
        }

        $('body').on('click', '.button-save', function () {
            SaveByButton();
        });

        function GetData(instruction)
        {
            if ($("#header-instruction").val() == "") {
                err = notHeader;
                return true;
            }
            instruction.Name = $("#header-instruction").val();
            var e = document.getElementById("category");
            var category = e.options[e.selectedIndex].text;
            if (category == e.options[0].text) {
                err = notCorrectCategory;
                return true;
            }
            Category = new Object();
            Category.Name = category;
            instruction.Category = Category;
            var tags = $("#tags").val().split(',');
            tags = RemoveEmptyElemets(tags);
            Tags = [];
            CreateTags(tags, Tags);
            instruction.Tags = Tags;
            instruction.Id = $("#id-instruction").val();
            return false;
        }

        function CreateTags(tags, Tags) {
            for (var i = 0; i < tags.length; i++) {
                object = new Object();
                object.Name = tags[i];
                Tags.push(object);
            }
        }

        function RemoveEmptyElemets(array) {
            var newarray = [];
            for (var i = 0; i < array.length; i++) {
                if ((array[i] != " ") && (array[i] != ""))
                    newarray.push(array[i]);
            }
            return newarray;
        }

        function SendAsAjax(data, controller, action) {
            var path = '/' + controller + '/' + action + '/';
            $.ajax({
                type: "POST",
                url: path,
                data: data,
                success: function (response) {
                    if (response.success) {
                        window.location.href = '@Url.Action("Step", "Instructions")/' + '?step=' + count + '&idInstruction=' + response.Id + '&idStep=0';
                    }
                },
            });
        }

        $('body').on('click', '#AddStep', function () {
            count++;
            SaveByAddStep();
        });

        $('body').on('click', '.icon-remove', function () {
            count--;
            var block = $(this).parent().parent().parent();
            SendRequestOnDelete(block);
            block.remove();
            Recount(); 
        });

        function SendRequestOnDelete(block) {
            var step = GetStep(block[0]);
            var id = $("#id-instruction").val();
            SendRequestAsUrl("/Instructions/DeleteStep/?num=" + step +'&instructionid='+id);
        }

        function SendRequestAsUrl(url)
        {
            $.ajax({
                url: url,
                type: "POST",
                success: function (response) {
                },
            });
        }

        function ChangeStepId(Ids)
        {
            var link = document.getElementsByClassName("go-to-step");
            for (var i = 0; i < link.length; i++) 
            {
                var input = link[i].getElementsByTagName('input')[0];
                $(input).val(Ids[i]);
            }
        }

        function SendRequestAsUrlAndGetResponse(url) {
            $.ajax({
                url: url,
                type: "POST",
                success: function (response) {
                    ChangeStepId(response.responseText);
                },
            });
        }

        function SendRequestMove(indexend,indexstart) {
            var id = $("#id-instruction").val();
            SendRequestAsUrlAndGetResponse("/Instructions/MoveStep/?numstart=" + indexstart + '&numend=' + indexend+ '&instructionid=' + id);
        }

        $('.content-sortable').sortable({
            items: '.move-true',
            start: function (event, ui) {
                ui.item.startPos = ui.item.index();
            },
            stop: function (e, ui) {
                Recount();
                SendRequestMove(ui.item.index(), ui.item.startPos);
            }
        });


        var availableTags = [];
        @foreach (var d in ViewBag.Tags)
        {
            @:availableTags.push("@d.Name");
        }
        function split(val) {
            return val.split(/,\s*/);
        }
        function extractLast(term) {
            return split(term).pop();
        }

        $("#tags")
            .on("keydown", function (event) {
                if (event.keyCode === $.ui.keyCode.TAB &&
                    $(this).autocomplete("instance").menu.active) {
                    event.preventDefault();
                }
            })
            .autocomplete({
                minLength: 0,
                source: function (request, response) {
                    response($.ui.autocomplete.filter(
                        availableTags, extractLast(request.term)));
                },
                focus: function () {
                    return false;
                },
                select: function (event, ui) {
                    var terms = split(this.value);
                    terms.pop();
                    terms.push(ui.item.value);
                    terms.push("");
                    this.value = terms.join(", ");
                    return false;
                }
            });
    });
</script>



@section Scripts {
    @Scripts.Render("~/Scripts/dowland/autocomplete-jquery-ui.js")
}

